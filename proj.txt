law(trivial,language(coffeescript))

UPON "sent", ->
	if @message.type is "beginCommunity"
		if not CS("communityApproval")?
			DO "set", key: "communityApproval", value: []
			controllerIP = @sender.split("@")[1]
			DO "set", key: "ip", value: controllerIP

		DO "forward", receiver: @receiver, sender: @self, message: {"type": "askCommunityApproval", "message": "Planing to start a community? Do you agree?"}
		return true

UPON "arrived", ->
	if @message.type is "communityBeginApproval" and @message.approval = "yes"
		if CS("communityApproval")? and @sender not in CS("communityApproval")
			approvalList = CS("communityApproval")
			newList = approvalList.concat(@sender)
			DO "set", key: "communityApproval", value: newList
			DO "deliver", receiver: @self, message: "Received approval from "+@sender

		if CS("communityApproval").length==2
			for m of CS("communityApproval")
				print CS("communityApproval")[m]
				DO "forward", receiver: CS("communityApproval")[m], sender: @self, message: "Lets begin the community."
			DO "deliver", receiver: @self, sender: @self, message: "Starting Community."
			print CS("ip")			
			DO "forward", receiver: "manager"+"@"+CS("ip"), sender: @self, message:{"type": "initiateCommunity", "text": "Lets begin the community.", "founders": CS("communityApproval")}  
			DO "forward", receiver: "group"+"@"+CS("ip"), sender: @self, message: {"type": "initiateGroup", "text": "Set up the group server."}
		return true

UPON "arrived", ->
	if @message.type is "initiateCommunity"
		DO "set", key: "community", value: 1
		foundersList = @message.founders.concat(@sender)		
		DO "set", key: "founders", value: foundersList
		print CS("founders")
		DO "set", key: "users", value: {}
		DO "deliver", sender: @sender, receiver: @self, message: "Community has been set up"
		return true	

UPON "sent", ->
	if @message.type is "register" and @receiver.startsWith("manager")
		DO "deliver", receiver: @self, sender: @self, message: "Waiting approval from founders."
		DO "set", key: "name", value: @message.name
		DO "set", key: "founderApprovals", value: []
		DO "forward", receiver: @receiver, sender: @self, message: {"type": "userRegistration", "user": @sender, "pseudoName": @message.name}
		return true

UPON "arrived", ->
	if @message.type is "userRegistration"		
		if not CS("community")?
			DO "forward", receiver: @sender, sender: @receiver, message: "Community does not exist."
			return true

		names = Object.keys(CS("users"))
		if @message.pseudoName in names
			DO "forward", receiver: @sender, sender: @receiver, message: "Your name has already been used by other users. Please choose a different name."
			return true

		DO "deliver", receiver: @self, sender: @sender, message: "Forwarding user registration request to founders for user - " +@sender
		for m of CS("founders")
			DO "forward", receiver: CS("founders")[m], sender: @self, message: {"type": "userApprovalRequest", user: @message.pseudoName}
		return true

UPON "arrived", ->
	if @message.type is "userApproval" and @message.approval is "yes"
		if CS("founderApprovals")? and @sender not in CS("founderApprovals")
			newList = CS("founderApprovals").concat(@sender)
			DO "set", key: "founderApprovals", value: newList
			DO "deliver", receiver: @self, message: "Approval received from "+@sender
			if CS("founderApprovals").length==3
				ip = @sender.split("@")[1]
				DO "set", key: "memberFlag", value: 1
				DO "forward", sender: @self, receiver: "manager"+"@"+ip, message: "Founders approved user: "+@receiver
				DO "forward", sender: @self, receiver: "manager"+"@"+ip, message: {"type": "addUser", "name": CS("name")}
				DO "deliver", receiver: @self, message: "Membership approved."
				DO "deliver", receiver: @self, message: "Please set-up your profile."
			return true

UPON "sent", ->
	if @message.type is "profile"
		DO "set", key: "username", value: @message.username
		DO "set", key: "dob", value: @message.dob
		DO "set", key: "archive", value: []
		return true
		

UPON "sent", ->
	if @message.type is "viewProfile"
		DO "deliver", message: "Your profile"
		DO "deliver", message: {"type": "user profile", "username": CS("username"), "date of birth": CS("dob")}
		return true

UPON "arrived", ->
	if @message.type is "getProfile"
		DO "forward", sender: @self, receiver: @receiver, message: {"type": "sendProfile", "to": @sender}
		return true

UPON "sent", ->
	if @message.type is "profileDetails"
		DO "forward", sender: @sender, receiver: @receiver, message: {"type": "requestedProfile", "username": CS("username"), "date of birth": CS("dob")}
		return true
		
	
UPON "arrived", ->
	if @message.type is "addUser" and @receiver.startsWith("manager")
		u = CS("users")
		u[@message.name] = @sender
		DO "set", key: "users", value: u
		print "User added"
		print CS("users")
		return true

UPON "sent", ->
	if @message.type is "revokeUser"
		if "name" not in Object.keys(@message)
			DO "deliver", message: "Please specify the name."
			return true
		ip = @sender.split("@")[1]
		DO "forward", sender: @self, receiver: "manager"+"@"+ip, message: {"type": "revokeUser", "name": @message.name}
		return true

UPON "arrived", ->
	if @message.type is "revokeUser" and @receiver.startsWith("manager")
		DO "deliver", sender: @self, receiver: @self, message: "Membership revoked for "+@message.name
		DO "forward", sender: @self, receiver: CS("users")[@message.name], message: {"type": "memberRemoved"}
		users = CS("users")
		delete users[@message.name]
		DO "set", key: "users", value: users
		
		print CS("users")
		return true 

UPON "arrived", ->
	if @message.type is "memberRemoved"
		DO "deliver", sender: @sender, receiver: @receiver, message: "Sorry. Your membership has been revoked."
		DO "unset", key: "memberFlag"
		return true
		
UPON "arrived", ->
	if @message.type is "initiateGroup"
		DO "deliver", sender: @sender, receiver: @receiver, message: "Group Server Set Up."
		DO "set", key: "group", value: 1
		DO "set", key: "groupOwners", value: {}
		return true

UPON "arrived", ->
	if @message.type is "createGroup" and @receiver.startsWith("manager")
		print "group creation forward"
		ip = @sender.split("@")[1]
		DO "forward", sender: @sender, receiver: "group"+"@"+ip, message: {"type": "addGroup", "groupName": @message.groupName, "groupOwner": @sender}
		return true

UPON "arrived", ->
	if @message.type is "addGroup"
		print "group creation request on group"
		if CS(@message.groupName)?
			DO "forward", sender: @self, receiver: @sender, message: "The requested group already exists."
		else
			DO "set", key: @message.groupName, value: [@message.groupOwner]			
			groupOwners = CS("groupOwners")
			groupOwners[@message.groupName] = @message.groupOwner
			DO "set", key: "groupOwners", value: groupOwners
			print CS("groupOwners")
			DO "forward", sender: @sender, receiver: @message.groupOwner, message: "Your group has been created. You are the owner of the group"
		return true

UPON "sent", ->
	if @message.type is "getAllGroups"
		ip = @sender.split("@")[1]
		DO "forward", sender: @self, receiver: "group"+"@"+ip, message: {"type": "returnGroups"}
		return true

UPON "arrived", ->
	if @message.type is "returnGroups"
		for gName, gOwner of CS("groupOwners")
			DO "forward", sender: @self, receiver: @sender, message: {"groupName": gName, "groupOwner": gOwner}

		return true

UPON "sent", ->
	if @message.type is "joinGroup"
		if CS("memberFlag")?
			DO "forward", sender: @sender, receiver: @receiver, message: {"type": @message.type, "groupName": @message.groupName}
		else
			DO "deliver", sender: @receiver, receiver: @sender, message: "You are not a member."
		return true
		
UPON "arrived", ->
	if @message.type is "joinGroup" and @receiver.startsWith("manager")
		ip = @sender.split("@")[1]
		DO "forward", sender:@self, receiver: "group"+"@"+ip, message: {"type": "getGroupOwnerApproval", "user": @sender, "groupName": @message.groupName}
		return true

UPON "arrived", ->
	if @message.type is "getGroupOwnerApproval" and @receiver.startsWith("group")
		if CS(@message.groupName)?	
			DO "forward", sender: @self, receiver: CS("groupOwners")[@message.groupName], message: {"type": "groupMembershipRequest", "user": @message.user, "groupName": @message.groupName}
		else
			DO "forward", sender: @self, receiver: @message.user, message: "Requested group does not exist."	
	
		return true

UPON "sent", ->
	if @message.type is "groupMembershipApproval" and @message.approval is "yes"
		ip = @sender.split("@")[1]
		DO "forward", sender: @self, receiver: @message.user, message: "your membership to the requested group - "+@message.groupName+" has been approved."
		DO "forward", sender: @self, receiver: "group"+"@"+ip, message: {"type": "addGroupUser", "groupName": @message.groupName, "user": @message.user}
		return true

UPON "arrived", ->
	if @message.type is "addGroupUser"
		users = CS(@message.groupName)
		if @message.user not in users
			newUsers = users.concat @message.user
			DO "set", key: @message.groupName, value: newUsers
		print CS(@message.groupName)
		return true
		
		
UPON "sent", ->
	if @message.type is "deleteGroup"
		ip = @sender.split("@")[1]
		DO "forward", sender: @self, receiver: "group"+"@"+ip, message: {"type": @message.type, "groupName": @message.groupName}
		return true

UPON "arrived", ->
	if @message.type is "deleteGroup"
		if not CS(@message.groupName)?
			DO "forward", sender: @self, receiver: @sender, message: @message.groupName + " does not exists."
		else
			if CS("groupOwners")[@message.groupName] is  @sender
				print "group delete by owner"
				print CS(@message.groupName)
				for user in CS(@message.groupName)
					DO "forward", sender: @self, receiver: user, message: @message.groupName + " has been deleted."
				print "messaged group members about delete"
				DO "unset", key: @message.groupName
				owners = CS("groupOwners")
				delete owners[@message.groupName]
				DO "set", key: "groupOwners", value: owners
				print CS("groupOwners")
			else
				DO "forward", sender: @self, receiver: @sender, message: "The group can be deleted by group owners only."
		return true
				
UPON "sent", ->
	if @message.type is "leaveGroup"
		ip = @sender.split("@")[1]
		if not CS("memberFlag")?
			DO "deliver", sender: "manager"+"@"+ip, receiver: @self, message: "you are not a member."
		else
			DO "forward", sender: @self, receiver: "group"+"@"+ip, message: {"type": @message.type, "groupName": @message.groupName, "user": @self}
		print "message sent from delete initiater."
		return true

UPON "arrived", -> 
	if @message.type is "leaveGroup" and @receiver.startsWith("group")
		if CS("groupOwners")[@message.groupName] is @message.user
			DO "forward", sender: @self, receiver: @message.user, message: "You are the owner of the group. Please delete the group instead or transfer your ownership."
		else
			groupMembers = CS(@message.groupName)
			if @message.user not in groupMembers
				DO "forward", sender: @self, receiver: @message.user, message: "You are not a member of the group - "+@message.groupName	
			else
				print "user to delete"
				print @message.user

				groupMembers.splice(index, 1) for index, value of groupMembers when value in [@message.user]
				print groupMembers

				DO "set", key: @message.groupName, value: groupMembers
				print CS(@message.groupName)
		return true	

UPON "sent", ->
	if @message.type is "removeFromGroup"
		ip = @sender.split("@")[1]
		DO "forward", sender: @sender, receiver: "group"+"@"+ip, message: {"type": "removeFromGroupEnquiry", "groupName": @message.groupName, "from": @sender, "user": @message.user}
		print "sent to check group owner"
		return true

UPON "arrived", ->
	if @message.type is "removeFromGroupEnquiry" and @receiver.startsWith("group")
		print "remove from Group received"
		if CS("groupOwners")[@message.groupName] is @message.from
			groupMembers = CS(@message.groupName)
			print groupMembers
			groupMembers.splice(index, 1) for index, value of groupMembers when value in [@message.user]
			print groupMembers

			DO "set", key: @message.groupName, value: groupMembers
			print "user removed"
			DO "forward", sender: @self, receiver: @message.user, message: "You are removed from group - " + @message.groupName
			print CS(@message.groupName)
		else
			print "non-owner tried to delete - "+@sender
			DO "forward", sender: @self, receiver: @sender, message: "you are not allowed to remove members from group - "+ @message.groupName

		return true	

UPON "sent", ->
	if @message.type is "sendGroupMessage"
		ip = @sender.split("@")[1]
		DO "forward", sender: @self, receiver: "group"+"@"+ip, message: {"type": "groupMessage", "groupName": @message.groupName, "text": @message.text}
		print "group message forwarded to group manager"
		return true

UPON "arrived", ->
	if @message.type is "groupMessage" and @receiver.startsWith("group")

		if not CS(@message.groupName)
			DO "forward", sender: @self, receiver: @sender, message: "No such group as "+@message.groupName+" exists."
			return true

		groupMembers = CS(@message.groupName)
		print "sending group message"
		if @sender in groupMembers
			for addr in groupMembers
				DO "forward", sender: @sender, receiver: addr, message: {"type": "groupMessageReceived", "groupName": @message.groupName, "text": @message.text}
		else
			DO "forward", sender: @self, receiver: @sender, message: "You are not a member of the group - "+@message.groupName

		return true		 	

UPON "sent", ->
	if @message.type is "sendMessage"
		if CS("memberFlag")?
			DO "forward", sender: @sender, receiver: @receiver, message: {"type": @message.type, "text": @message.text}
		else
			DO "deliver", message: "You are not a registered member. Please register first."
		return true

UPON "arrived", ->
	if @message.type is "sendMessage"
		DO "forward", sender: @sender, receiver: @receiver, message: {"type": "personalMessage", "from": @sender, "text": @message.text}
		return true

UPON "sent", ->
	if @message.type is "transferGroupOwnership"
		ip = @sender.split("@")[1]
		DO "forward", sender: @self, receiver: "group"+"@"+ip, message: {"type": @message.type, "groupName": @message.groupName, "owner": @sender, "transferTo": @receiver}
		return true

UPON "arrived", ->
	if @message.type is "transferGroupOwnership" and @receiver.startsWith("group")
		membersList = CS(@message.groupName)
		if @message.transferTo not in membersList
			DO "forward", sender: @self, receiver: @sender, message: @message.transferTo + " is not a member of the group "+@message.groupName
		else
			DO "forward", sender: @message.owner, receiver: @message.transferTo, message: "Do you want to take ownership of the group - "+@message.groupName + " from " +@sender+" ?"
		return true

UPON "sent", ->
	if @message.type is "acceptGroupOwnership"
		ip = @sender.split("@")[1]
		if @message.approval is "yes"
			DO "forward", sender: @sender, receiver: "group"+"@"+ip, message: {"type": "changeOwner", "groupName": @message.groupName, "newOwner": @sender, "oldOwner": @receiver}
			DO "forward", sender: @sender, receiver: @receiver, message: "Ownership of group - "+@message.groupName+" has been accepted by "+@sender 
		if @message.approval is "no"
			DO "forward", sender: @sender, receiver: @receiver, message: "request to accept ownership of group - "+@message.groupOwner+" has been accepted by "+@sender
		return true

UPON "arrived", ->
	if @message.type is  "changeOwner" and @receiver.startsWith("group")
		owners = CS("groupOwners")
		if owners[@message.groupName] is @message.oldOwner
			owners[@message.groupName] = @message.newOwner
			DO "set", key: "groupOwners", value: owners
			print "owner of "+ @message.groupName+" has been changed from "+@message.oldOwner+" to "+@message.newOwner
		return true
			
UPON "sent", ->
	if @message.type is "getGroupInfo"
		ip = @sender.split("@")[1]
		DO "forward", sender: @self, receiver: "group"+"@"+ip, message: {"type": @message.type, "groupName": @message.groupName}
		return true

UPON "arrived", ->
	if @message.type is "getGroupInfo" and @receiver.startsWith("group")
		if CS(@message.groupName)
			members = CS(@message.groupName)
			owner = CS("groupOwners")[@message.groupName]
			DO "forward", sender: @self, receiver: @sender, message: {"type": "groupDetails", "groupName": @message.groupName, "owner": owner, "members": members}
		else
			DO "forward", sender: @self, receiver: @sender, message: "No group with the name - "+@message.groupName+ " exists."
		return true

UPON "arrived", ->
	if @message.type is "groupMessageReceived" or @message.type is "personalMessage"
		DO "deliver"
		oldMsgs = CS("archive")
		print @message
		newMsgs = oldMsgs.concat @message
		DO "set", key: "archive", value: newMsgs
		return true
						
UPON "sent", ->
	if @message.type is "viewArchive"
		DO "deliver", message: "archive"
		for msg in CS("archive")
			DO "deliver", message: msg

		return true
		

UPON "sent", ->
	DO "forward"
	return true

UPON "arrived", ->
	DO "deliver"
	return true

UPON "disconnected", ->
  
	DO "quit"
  
	return true

